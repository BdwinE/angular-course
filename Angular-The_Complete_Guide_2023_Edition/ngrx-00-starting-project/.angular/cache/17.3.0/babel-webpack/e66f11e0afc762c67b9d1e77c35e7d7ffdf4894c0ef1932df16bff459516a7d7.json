{"ast":null,"code":"import { Subject, of, take } from 'rxjs';\nimport { ingredientsSelector } from '../store/selectors/shopping-list.selectors';\nimport { addIngredientAction, addIngredientsAction, deleteIngredientAction, updateIngredientAction } from '../store/actions/shopping-list.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ShoppingListService {\n  getIngredients() {\n    console.log('IN GET INGREDIENTS');\n    console.log(this.ingredients);\n    return this.ingredients.slice();\n  }\n  getIngredients$() {\n    return this.store.select(ingredientsSelector);\n  }\n  getIngredient(index) {\n    return this.ingredients[index];\n  }\n  getIngredient$(index) {\n    return this.getIngredients$().pipe(take(1), ingredients => of(ingredients[index]));\n  }\n  addIngredient(ingredient) {\n    //this.ingredients.push(ingredient);\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(addIngredientAction({\n      ingredient\n    }));\n  }\n  addIngredients(ingredients) {\n    //this.ingredients.push(...ingredients);\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(addIngredientsAction({\n      ingredients\n    }));\n  }\n  updateIngredient(index, newIngredient) {\n    //this.ingredients[index] = newIngredient;\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(updateIngredientAction({\n      index: index,\n      newIngredient: newIngredient\n    }));\n  }\n  deleteIngredient(index) {\n    //this.ingredients.splice(index, 1);\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(deleteIngredientAction({\n      index: index\n    }));\n  }\n  constructor(store) {\n    this.store = store;\n    this.ingredientsChanged = new Subject();\n    this.startedEditing = new Subject();\n    // private ingredients: Ingredient[] = [\n    //   new Ingredient('Apples', 5),\n    //   new Ingredient('Tomatoes', 10),\n    // ];\n    this.ingredients = [];\n    this.store.select(ingredientsSelector).subscribe(ingredients => {\n      this.ingredients = ingredients;\n    });\n  }\n  static #_ = this.ɵfac = function ShoppingListService_Factory(t) {\n    return new (t || ShoppingListService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShoppingListService,\n    factory: ShoppingListService.ɵfac\n  });\n}","map":{"version":3,"names":["Subject","of","take","ingredientsSelector","addIngredientAction","addIngredientsAction","deleteIngredientAction","updateIngredientAction","ShoppingListService","getIngredients","console","log","ingredients","slice","getIngredients$","store","select","getIngredient","index","getIngredient$","pipe","addIngredient","ingredient","dispatch","addIngredients","updateIngredient","newIngredient","deleteIngredient","constructor","ingredientsChanged","startedEditing","subscribe","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac"],"sources":["C:\\Users\\asolu\\PersonalDevProjects\\Udemy\\Angular-The_Complete_Guide_2023_Edition\\ngrx-00-starting-project\\src\\app\\shopping-list\\shopping-list.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Ingredient } from '../shared/ingredient.model';\nimport { Subject, of, take } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { StoreModel } from '../store/store.model';\nimport { ingredientsSelector } from '../store/selectors/shopping-list.selectors';\nimport {\n  addIngredientAction,\n  addIngredientsAction,\n  deleteIngredientAction,\n  updateIngredientAction,\n} from '../store/actions/shopping-list.actions';\n\n@Injectable()\nexport class ShoppingListService {\n  ingredientsChanged = new Subject<Ingredient[]>();\n  startedEditing = new Subject<number>();\n  // private ingredients: Ingredient[] = [\n  //   new Ingredient('Apples', 5),\n  //   new Ingredient('Tomatoes', 10),\n  // ];\n\n  private ingredients: Ingredient[] = [];\n\n  getIngredients() {\n    console.log('IN GET INGREDIENTS');\n    console.log(this.ingredients);\n    return this.ingredients.slice();\n  }\n\n  getIngredients$() {\n    return this.store.select(ingredientsSelector);\n  }\n\n  getIngredient(index: number) {\n    return this.ingredients[index];\n  }\n\n  getIngredient$(index: number) {\n    return this.getIngredients$().pipe(take(1), (ingredients) =>\n      of(ingredients[index])\n    );\n  }\n\n  addIngredient(ingredient: Ingredient) {\n    //this.ingredients.push(ingredient);\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(addIngredientAction({ ingredient }));\n  }\n\n  addIngredients(ingredients: Ingredient[]) {\n    //this.ingredients.push(...ingredients);\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(addIngredientsAction({ ingredients }));\n  }\n\n  updateIngredient(index: number, newIngredient: Ingredient) {\n    //this.ingredients[index] = newIngredient;\n    //this.ingredientsChanged.next(this.ingredients.slice());\n\n    this.store.dispatch(\n      updateIngredientAction({\n        index: index,\n        newIngredient: newIngredient,\n      })\n    );\n  }\n\n  deleteIngredient(index: number) {\n    //this.ingredients.splice(index, 1);\n    //this.ingredientsChanged.next(this.ingredients.slice());\n    this.store.dispatch(deleteIngredientAction({ index: index }));\n  }\n\n  constructor(private store: Store) {\n    this.store.select(ingredientsSelector).subscribe((ingredients) => {\n      this.ingredients = ingredients;\n    });\n  }\n}\n"],"mappings":"AAEA,SAASA,OAAO,EAAEC,EAAE,EAAEC,IAAI,QAAQ,MAAM;AAGxC,SAASC,mBAAmB,QAAQ,4CAA4C;AAChF,SACEC,mBAAmB,EACnBC,oBAAoB,EACpBC,sBAAsB,EACtBC,sBAAsB,QACjB,wCAAwC;;;AAG/C,OAAM,MAAOC,mBAAmB;EAU9BC,cAAcA,CAAA;IACZC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjCD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,WAAW,CAAC;IAC7B,OAAO,IAAI,CAACA,WAAW,CAACC,KAAK,EAAE;EACjC;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACC,KAAK,CAACC,MAAM,CAACb,mBAAmB,CAAC;EAC/C;EAEAc,aAAaA,CAACC,KAAa;IACzB,OAAO,IAAI,CAACN,WAAW,CAACM,KAAK,CAAC;EAChC;EAEAC,cAAcA,CAACD,KAAa;IAC1B,OAAO,IAAI,CAACJ,eAAe,EAAE,CAACM,IAAI,CAAClB,IAAI,CAAC,CAAC,CAAC,EAAGU,WAAW,IACtDX,EAAE,CAACW,WAAW,CAACM,KAAK,CAAC,CAAC,CACvB;EACH;EAEAG,aAAaA,CAACC,UAAsB;IAClC;IACA;IACA,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACnB,mBAAmB,CAAC;MAAEkB;IAAU,CAAE,CAAC,CAAC;EAC1D;EAEAE,cAAcA,CAACZ,WAAyB;IACtC;IACA;IACA,IAAI,CAACG,KAAK,CAACQ,QAAQ,CAAClB,oBAAoB,CAAC;MAAEO;IAAW,CAAE,CAAC,CAAC;EAC5D;EAEAa,gBAAgBA,CAACP,KAAa,EAAEQ,aAAyB;IACvD;IACA;IAEA,IAAI,CAACX,KAAK,CAACQ,QAAQ,CACjBhB,sBAAsB,CAAC;MACrBW,KAAK,EAAEA,KAAK;MACZQ,aAAa,EAAEA;KAChB,CAAC,CACH;EACH;EAEAC,gBAAgBA,CAACT,KAAa;IAC5B;IACA;IACA,IAAI,CAACH,KAAK,CAACQ,QAAQ,CAACjB,sBAAsB,CAAC;MAAEY,KAAK,EAAEA;IAAK,CAAE,CAAC,CAAC;EAC/D;EAEAU,YAAoBb,KAAY;IAAZ,KAAAA,KAAK,GAALA,KAAK;IA3DzB,KAAAc,kBAAkB,GAAG,IAAI7B,OAAO,EAAgB;IAChD,KAAA8B,cAAc,GAAG,IAAI9B,OAAO,EAAU;IACtC;IACA;IACA;IACA;IAEQ,KAAAY,WAAW,GAAiB,EAAE;IAqDpC,IAAI,CAACG,KAAK,CAACC,MAAM,CAACb,mBAAmB,CAAC,CAAC4B,SAAS,CAAEnB,WAAW,IAAI;MAC/D,IAAI,CAACA,WAAW,GAAGA,WAAW;IAChC,CAAC,CAAC;EACJ;EAAC,QAAAoB,CAAA,G;qBAhEUxB,mBAAmB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,KAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB7B,mBAAmB;IAAA8B,OAAA,EAAnB9B,mBAAmB,CAAA+B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}