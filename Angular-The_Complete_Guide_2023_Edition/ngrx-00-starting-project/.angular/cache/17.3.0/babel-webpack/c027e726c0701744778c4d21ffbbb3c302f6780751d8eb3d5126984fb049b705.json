{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { take, exhaustMap } from 'rxjs/operators';\nimport { userSelector } from '../store/selectors/auth.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@ngrx/store\";\nexport class AuthInterceptorService {\n  constructor(authService, store) {\n    this.authService = authService;\n    this.store = store;\n  }\n  intercept(req, next) {\n    //return this.authService.user.pipe(\n    return this.store.select(userSelector).pipe(take(1), exhaustMap(user => {\n      if (!user) {\n        return next.handle(req);\n      }\n      const modifiedReq = req.clone({\n        params: new HttpParams().set('auth', user.token)\n      });\n      return next.handle(modifiedReq);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpParams","take","exhaustMap","userSelector","AuthInterceptorService","constructor","authService","store","intercept","req","next","select","pipe","user","handle","modifiedReq","clone","params","set","token","_","i0","ɵɵinject","i1","AuthService","i2","Store","_2","factory","ɵfac"],"sources":["C:\\Users\\asolu\\PersonalDevProjects\\Udemy\\Angular-The_Complete_Guide_2023_Edition\\ngrx-00-starting-project\\src\\app\\auth\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpParams,\n} from '@angular/common/http';\nimport { take, exhaustMap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { Store } from '@ngrx/store';\nimport { userSelector } from '../store/selectors/auth.selectors';\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private authService: AuthService, private store: Store) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    //return this.authService.user.pipe(\n    return this.store.select(userSelector).pipe(\n      take(1),\n      exhaustMap((user) => {\n        if (!user) {\n          return next.handle(req);\n        }\n        const modifiedReq = req.clone({\n          params: new HttpParams().set('auth', user.token),\n        });\n        return next.handle(modifiedReq);\n      })\n    );\n  }\n}\n"],"mappings":"AACA,SAIEA,UAAU,QACL,sBAAsB;AAC7B,SAASC,IAAI,EAAEC,UAAU,QAAQ,gBAAgB;AAIjD,SAASC,YAAY,QAAQ,mCAAmC;;;;AAGhE,OAAM,MAAOC,sBAAsB;EACjCC,YAAoBC,WAAwB,EAAUC,KAAY;IAA9C,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,KAAK,GAALA,KAAK;EAAU;EAErEC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,OAAO,IAAI,CAACH,KAAK,CAACI,MAAM,CAACR,YAAY,CAAC,CAACS,IAAI,CACzCX,IAAI,CAAC,CAAC,CAAC,EACPC,UAAU,CAAEW,IAAI,IAAI;MAClB,IAAI,CAACA,IAAI,EAAE;QACT,OAAOH,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC;MACzB;MACA,MAAMM,WAAW,GAAGN,GAAG,CAACO,KAAK,CAAC;QAC5BC,MAAM,EAAE,IAAIjB,UAAU,EAAE,CAACkB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,KAAK;OAChD,CAAC;MACF,OAAOT,IAAI,CAACI,MAAM,CAACC,WAAW,CAAC;IACjC,CAAC,CAAC,CACH;EACH;EAAC,QAAAK,CAAA,G;qBAjBUhB,sBAAsB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBvB,sBAAsB;IAAAwB,OAAA,EAAtBxB,sBAAsB,CAAAyB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}