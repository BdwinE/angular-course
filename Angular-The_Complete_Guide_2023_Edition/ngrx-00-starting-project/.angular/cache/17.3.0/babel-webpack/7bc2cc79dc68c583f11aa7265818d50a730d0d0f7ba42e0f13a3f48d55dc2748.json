{"ast":null,"code":"//import { recipesSelector } from '../store/selectors/recipe.selectors';\nimport { map, take } from 'rxjs';\nimport { fetchRecipesAction, setRecipesAction } from '../store/actions/recipes.actions';\nimport { ofType } from '@ngrx/effects';\nimport { recipesSelector } from '../store/selectors/recipe.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport class RecipesResolverService {\n  constructor(\n  //private dataStorageService: DataStorageService,\n  //private recipesService: RecipeService,\n  store, actions$) {\n    this.store = store;\n    this.actions$ = actions$;\n  }\n  resolve(route, state) {\n    // const recipes = this.recipesService.getRecipes();\n    // if (recipes.length === 0) {\n    //   return this.dataStorageService.fetchRecipes();\n    // } else {\n    //   return recipes;\n    // }\n    this.store.select(recipesSelector).pipe(map(recipesState => {}));\n    this.store.dispatch(fetchRecipesAction());\n    return this.actions$.pipe(ofType(setRecipesAction), take(1), map(recipesState => recipesState.recipes));\n  }\n  static #_ = this.ɵfac = function RecipesResolverService_Factory(t) {\n    return new (t || RecipesResolverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipesResolverService,\n    factory: RecipesResolverService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","take","fetchRecipesAction","setRecipesAction","ofType","recipesSelector","RecipesResolverService","constructor","store","actions$","resolve","route","state","select","pipe","recipesState","dispatch","recipes","_","i0","ɵɵinject","i1","Store","i2","Actions","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\asolu\\PersonalDevProjects\\Udemy\\Angular-The_Complete_Guide_2023_Edition\\ngrx-00-starting-project\\src\\app\\recipes\\recipes-resolver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Resolve,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { Recipe } from './recipe.model';\n//import { DataStorageService } from '../shared/data-storage.service';\n//import { RecipeService } from './recipe.service';\nimport { Store } from '@ngrx/store';\nimport { StoreModel } from '../store/store.model';\n//import { recipesSelector } from '../store/selectors/recipe.selectors';\nimport { map, of, take } from 'rxjs';\nimport {\n  fetchRecipesAction,\n  setRecipesAction,\n} from '../store/actions/recipes.actions';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { recipesSelector } from '../store/selectors/recipe.selectors';\n\n@Injectable({ providedIn: 'root' })\nexport class RecipesResolverService implements Resolve<Recipe[]> {\n  constructor(\n    //private dataStorageService: DataStorageService,\n    //private recipesService: RecipeService,\n    private store: Store<StoreModel>,\n    private actions$: Actions\n  ) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // const recipes = this.recipesService.getRecipes();\n\n    // if (recipes.length === 0) {\n    //   return this.dataStorageService.fetchRecipes();\n    // } else {\n    //   return recipes;\n    // }\n    this.store.select(recipesSelector).pipe(map((recipesState) => {}));\n    this.store.dispatch(fetchRecipesAction());\n    return this.actions$.pipe(\n      ofType(setRecipesAction),\n      take(1),\n      map((recipesState) => recipesState.recipes)\n    );\n  }\n}\n"],"mappings":"AAYA;AACA,SAASA,GAAG,EAAMC,IAAI,QAAQ,MAAM;AACpC,SACEC,kBAAkB,EAClBC,gBAAgB,QACX,kCAAkC;AACzC,SAAkBC,MAAM,QAAQ,eAAe;AAC/C,SAASC,eAAe,QAAQ,qCAAqC;;;;AAGrE,OAAM,MAAOC,sBAAsB;EACjCC;EACE;EACA;EACQC,KAAwB,EACxBC,QAAiB;IADjB,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,QAAQ,GAARA,QAAQ;EACf;EAEHC,OAAOA,CAACC,KAA6B,EAAEC,KAA0B;IAC/D;IAEA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACR,eAAe,CAAC,CAACS,IAAI,CAACd,GAAG,CAAEe,YAAY,IAAI,CAAE,CAAC,CAAC,CAAC;IAClE,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACd,kBAAkB,EAAE,CAAC;IACzC,OAAO,IAAI,CAACO,QAAQ,CAACK,IAAI,CACvBV,MAAM,CAACD,gBAAgB,CAAC,EACxBF,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAEe,YAAY,IAAKA,YAAY,CAACE,OAAO,CAAC,CAC5C;EACH;EAAC,QAAAC,CAAA,G;qBAvBUZ,sBAAsB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,KAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,OAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBnB,sBAAsB;IAAAoB,OAAA,EAAtBpB,sBAAsB,CAAAqB,IAAA;IAAAC,UAAA,EADT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}