{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { switchMap, map, catchError, of, tap } from 'rxjs';\nimport { User } from 'src/app/auth/user.model';\nimport { environment } from 'src/environments/environment';\nimport * as AuthActions from '../../actions/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"src/app/auth/auth.service\";\nexport class AuthLoginEffect {\n  constructor(actions$, http, authService) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.authService = authService;\n    this.authLoginEffect = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(authData => {\n      console.log('AuthData:');\n      console.log(authData);\n      return this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + environment.firebaseAPIKey, {\n        email: authData['email'],\n        password: authData['password'],\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n      }), map(resData => {\n        const expirationDate = new Date(new Date().getTime() + +resData.expiresIn * 1000);\n        const newUser = new User(resData.email, resData.localId, resData.idToken, expirationDate);\n        localStorage.setItem('UserData', JSON.stringify(newUser));\n        return AuthActions.authenticateAction({\n          user: newUser\n        });\n      }), catchError(errorRes => {\n        let errorMessage = 'An unknown error occurred!';\n        if (!errorRes.error || !errorRes.error.error) {\n          return of(AuthActions.authenticateFailAction({\n            payload: errorMessage\n          }));\n        }\n        switch (errorRes.error.error.message) {\n          case 'EMAIL_EXISTS':\n            errorMessage = 'This email exists already';\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage = 'This email does not exist.';\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage = 'This password is not correct.';\n            break;\n        }\n        return of(AuthActions.authenticateFailAction({\n          payload: errorMessage\n        }));\n      }));\n    })), {\n      dispatch: true\n    });\n  }\n  static #_ = this.ɵfac = function AuthLoginEffect_Factory(t) {\n    return new (t || AuthLoginEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthLoginEffect,\n    factory: AuthLoginEffect.ɵfac\n  });\n}","map":{"version":3,"names":["createEffect","ofType","switchMap","map","catchError","of","tap","User","environment","AuthActions","AuthLoginEffect","constructor","actions$","http","authService","authLoginEffect","pipe","LOGIN_START","authData","console","log","post","firebaseAPIKey","email","password","returnSecureToken","resData","setLogoutTimer","expiresIn","expirationDate","Date","getTime","newUser","localId","idToken","localStorage","setItem","JSON","stringify","authenticateAction","user","errorRes","errorMessage","error","authenticateFailAction","payload","message","dispatch","_","i0","ɵɵinject","i1","Actions","i2","HttpClient","i3","AuthService","_2","factory","ɵfac"],"sources":["C:\\Users\\asolu\\PersonalDevProjects\\Udemy\\Angular-The_Complete_Guide_2023_Edition\\ngrx-00-starting-project\\src\\app\\store\\effects\\auth\\auth-login.effect.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { createEffect, ofType, Actions } from '@ngrx/effects';\r\nimport { switchMap, map, catchError, of, tap } from 'rxjs';\r\nimport { User } from 'src/app/auth/user.model';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as AuthActions from '../../actions/auth.actions';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\n\r\nexport interface AuthResponseData {\r\n  kind: string;\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  registered?: boolean;\r\n}\r\n@Injectable()\r\nexport class AuthLoginEffect {\r\n  authLoginEffect = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.LOGIN_START),\r\n        switchMap((authData: AuthActions.loginStartAction) => {\r\n          console.log('AuthData:');\r\n          console.log(authData);\r\n          return this.http\r\n            .post<AuthResponseData>(\r\n              'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' +\r\n                environment.firebaseAPIKey,\r\n              {\r\n                email: authData['email'],\r\n                password: authData['password'],\r\n                returnSecureToken: true,\r\n              }\r\n            )\r\n            .pipe(\r\n              tap((resData) => {\r\n                this.authService.setLogoutTimer(+resData.expiresIn * 1000);\r\n              }),\r\n              map((resData) => {\r\n                const expirationDate = new Date(\r\n                  new Date().getTime() + +resData.expiresIn * 1000\r\n                );\r\n                const newUser = new User(\r\n                  resData.email,\r\n                  resData.localId,\r\n                  resData.idToken,\r\n                  expirationDate\r\n                );\r\n                localStorage.setItem('UserData', JSON.stringify(newUser));\r\n                return AuthActions.authenticateAction({ user: newUser });\r\n              }),\r\n              catchError((errorRes) => {\r\n                let errorMessage = 'An unknown error occurred!';\r\n                if (!errorRes.error || !errorRes.error.error) {\r\n                  return of(\r\n                    AuthActions.authenticateFailAction({\r\n                      payload: errorMessage,\r\n                    })\r\n                  );\r\n                }\r\n                switch (errorRes.error.error.message) {\r\n                  case 'EMAIL_EXISTS':\r\n                    errorMessage = 'This email exists already';\r\n                    break;\r\n                  case 'EMAIL_NOT_FOUND':\r\n                    errorMessage = 'This email does not exist.';\r\n                    break;\r\n                  case 'INVALID_PASSWORD':\r\n                    errorMessage = 'This password is not correct.';\r\n                    break;\r\n                }\r\n                return of(\r\n                  AuthActions.authenticateFailAction({ payload: errorMessage })\r\n                );\r\n              })\r\n            );\r\n        })\r\n      ),\r\n    { dispatch: true }\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}