{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map } from 'rxjs';\nimport * as AuthActions from '../../actions/auth.actions';\nimport { User } from 'src/app/auth/user.model';\nimport { AuthService } from 'src/app/auth/auth.service';\nexport const authAutoLoginEffect = createEffect((actions$ = inject(Actions), authentService = inject(AuthService)) => {\n  return actions$.pipe(ofType(AuthActions.autoLoginAction), map(() => {\n    const userData = JSON.parse(localStorage.getItem('UserData'));\n    if (!userData) {\n      return {\n        type: 'DUMMY'\n      };\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if (loadedUser.token) {\n      //this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      authentService.setLogoutTimer(expirationDuration);\n      return AuthActions.authenticateAction({\n        user: loadedUser,\n        redirect: false\n      });\n      // const expirationDuration =\n      //   new Date(userData._tokenExpirationDate).getTime() -\n      //   new Date().getTime();\n      // this.autoLogout(expirationDuration);\n    }\n    return {\n      type: 'DUMMY'\n    };\n  }));\n}, {\n  functional: true,\n  dispatch: true\n});","map":{"version":3,"names":["inject","Actions","createEffect","ofType","map","AuthActions","User","AuthService","authAutoLoginEffect","actions$","authentService","pipe","autoLoginAction","userData","JSON","parse","localStorage","getItem","type","loadedUser","email","id","_token","Date","_tokenExpirationDate","token","expirationDuration","getTime","setLogoutTimer","authenticateAction","user","redirect","functional","dispatch"],"sources":["C:\\Users\\asolu\\PersonalDevProjects\\Udemy\\Angular-The_Complete_Guide_2023_Edition\\ngrx-00-starting-project\\src\\app\\store\\effects\\auth\\auth-auto-login.effect.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map, of, tap } from 'rxjs';\r\nimport * as AuthActions from '../../actions/auth.actions';\r\nimport { Router } from '@angular/router';\r\nimport { User } from 'src/app/auth/user.model';\r\nimport { Store } from '@ngrx/store';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\n\r\nexport const authAutoLoginEffect = createEffect(\r\n  (actions$ = inject(Actions), authentService = inject(AuthService)) => {\r\n    return actions$.pipe(\r\n      ofType(AuthActions.autoLoginAction),\r\n      map(() => {\r\n        const userData: {\r\n          email: string;\r\n          id: string;\r\n          _token: string;\r\n          _tokenExpirationDate: string;\r\n        } = JSON.parse(localStorage.getItem('UserData'));\r\n        if (!userData) {\r\n          return { type: 'DUMMY' };\r\n        }\r\n\r\n        const loadedUser = new User(\r\n          userData.email,\r\n          userData.id,\r\n          userData._token,\r\n          new Date(userData._tokenExpirationDate)\r\n        );\r\n\r\n        if (loadedUser.token) {\r\n          //this.user.next(loadedUser);\r\n          const expirationDuration =\r\n            new Date(userData._tokenExpirationDate).getTime() -\r\n            new Date().getTime();\r\n          authentService.setLogoutTimer(expirationDuration);\r\n          return AuthActions.authenticateAction({\r\n            user: loadedUser,\r\n            redirect: false,\r\n          });\r\n          // const expirationDuration =\r\n          //   new Date(userData._tokenExpirationDate).getTime() -\r\n          //   new Date().getTime();\r\n          // this.autoLogout(expirationDuration);\r\n        }\r\n        return { type: 'DUMMY' };\r\n      })\r\n    );\r\n  },\r\n  { functional: true, dispatch: true }\r\n);\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,OAAO,EAAEC,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,GAAG,QAAiB,MAAM;AACnC,OAAO,KAAKC,WAAW,MAAM,4BAA4B;AAEzD,SAASC,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,WAAW,QAAQ,2BAA2B;AAEvD,OAAO,MAAMC,mBAAmB,GAAGN,YAAY,CAC7C,CAACO,QAAQ,GAAGT,MAAM,CAACC,OAAO,CAAC,EAAES,cAAc,GAAGV,MAAM,CAACO,WAAW,CAAC,KAAI;EACnE,OAAOE,QAAQ,CAACE,IAAI,CAClBR,MAAM,CAACE,WAAW,CAACO,eAAe,CAAC,EACnCR,GAAG,CAAC,MAAK;IACP,MAAMS,QAAQ,GAKVC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IAChD,IAAI,CAACJ,QAAQ,EAAE;MACb,OAAO;QAAEK,IAAI,EAAE;MAAO,CAAE;IAC1B;IAEA,MAAMC,UAAU,GAAG,IAAIb,IAAI,CACzBO,QAAQ,CAACO,KAAK,EACdP,QAAQ,CAACQ,EAAE,EACXR,QAAQ,CAACS,MAAM,EACf,IAAIC,IAAI,CAACV,QAAQ,CAACW,oBAAoB,CAAC,CACxC;IAED,IAAIL,UAAU,CAACM,KAAK,EAAE;MACpB;MACA,MAAMC,kBAAkB,GACtB,IAAIH,IAAI,CAACV,QAAQ,CAACW,oBAAoB,CAAC,CAACG,OAAO,EAAE,GACjD,IAAIJ,IAAI,EAAE,CAACI,OAAO,EAAE;MACtBjB,cAAc,CAACkB,cAAc,CAACF,kBAAkB,CAAC;MACjD,OAAOrB,WAAW,CAACwB,kBAAkB,CAAC;QACpCC,IAAI,EAAEX,UAAU;QAChBY,QAAQ,EAAE;OACX,CAAC;MACF;MACA;MACA;MACA;IACF;IACA,OAAO;MAAEb,IAAI,EAAE;IAAO,CAAE;EAC1B,CAAC,CAAC,CACH;AACH,CAAC,EACD;EAAEc,UAAU,EAAE,IAAI;EAAEC,QAAQ,EAAE;AAAI,CAAE,CACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}