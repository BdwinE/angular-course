{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport { userSelector } from '../store/selectors/auth.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nexport class AuthGuard {\n  constructor(\n  //private authService: AuthService,\n  router, store) {\n    this.router = router;\n    this.store = store;\n  }\n  canActivate(route, router) {\n    //return this.authService.user.pipe(\n    return this.store.select(userSelector).pipe(take(1), map(user => {\n      const isAuth = !!user;\n      if (isAuth) {\n        return true;\n      }\n      return this.router.createUrlTree(['/auth']);\n    })\n    // tap(isAuth => {\n    //   if (!isAuth) {\n    //     this.router.navigate(['/auth']);\n    //   }\n    // })\n    );\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","take","userSelector","AuthGuard","constructor","router","store","canActivate","route","select","pipe","user","isAuth","createUrlTree","_","i0","ɵɵinject","i1","Router","i2","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\asolu\\PersonalDevProjects\\Udemy\\Angular-The_Complete_Guide_2023_Edition\\ngrx-00-starting-project\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n  UrlTree,\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap, take } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { Store } from '@ngrx/store';\nimport { userSelector } from '../store/selectors/auth.selectors';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(\n    //private authService: AuthService,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    router: RouterStateSnapshot\n  ):\n    | boolean\n    | UrlTree\n    | Promise<boolean | UrlTree>\n    | Observable<boolean | UrlTree> {\n    //return this.authService.user.pipe(\n    return this.store.select(userSelector).pipe(\n      take(1),\n      map((user) => {\n        const isAuth = !!user;\n        if (isAuth) {\n          return true;\n        }\n        return this.router.createUrlTree(['/auth']);\n      })\n      // tap(isAuth => {\n      //   if (!isAuth) {\n      //     this.router.navigate(['/auth']);\n      //   }\n      // })\n    );\n  }\n}\n"],"mappings":"AASA,SAASA,GAAG,EAAOC,IAAI,QAAQ,gBAAgB;AAI/C,SAASC,YAAY,QAAQ,mCAAmC;;;;AAGhE,OAAM,MAAOC,SAAS;EACpBC;EACE;EACQC,MAAc,EACdC,KAAY;IADZ,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACZ;EAEHC,WAAWA,CACTC,KAA6B,EAC7BH,MAA2B;IAM3B;IACA,OAAO,IAAI,CAACC,KAAK,CAACG,MAAM,CAACP,YAAY,CAAC,CAACQ,IAAI,CACzCT,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAEW,IAAI,IAAI;MACX,MAAMC,MAAM,GAAG,CAAC,CAACD,IAAI;MACrB,IAAIC,MAAM,EAAE;QACV,OAAO,IAAI;MACb;MACA,OAAO,IAAI,CAACP,MAAM,CAACQ,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IACD;IACA;IACA;IACA;IACA;KACD;EACH;EAAC,QAAAC,CAAA,G;qBA/BUX,SAAS,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATlB,SAAS;IAAAmB,OAAA,EAATnB,SAAS,CAAAoB,IAAA;IAAAC,UAAA,EADI;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}